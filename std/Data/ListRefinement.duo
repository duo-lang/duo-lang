module Data.ListRefinement;

import Data.PeanoRefinement;
import Data.BoolRefinement;
import Codata.Function;

refinement data List : (+a : CBV) -> CBV {
    Nil,
    Cons(a, List(a))
};


def prd x : forall a. <List(a)|Nil>(a) := Nil;
def prd x2 : forall a. <List(a) | r | Nil>(a) := Nil;
def prd y := Nil; 
def prd z := Cons(S(S(Z)), Nil);


--  Computes the length of a list.
def rec prd length : forall a. <List(a) | r | Nil, Cons(a,r(a)) >(a) -> <Nat | r2 | Z, S(r2)>:=
    \xs => case xs of {
        Nil => Z,
        Cons(_, xs) => S(length xs)
    };

def rec prd tail : forall a. <List(a) | r | Cons(a,r(a))>(a) -> <List(a) | r | Nil, Cons(a,r(a))>(a) := 
    \xs => case xs of {
       Cons(z,zs) => zs
        };

--  Append two lists together.
def rec prd append : forall a. <List(b) | r | Nil, Cons(b,r(b)) >(a) -> <List(b) | r | Nil, Cons(b,r(b))>(a) -> <List(b) | r | Nil, Cons(b,r(b)) >(a) :=
   \xs ys => case xs of {
        Nil => ys,
        Cons(z, zs) => Cons(z, append zs ys)
    };

--  Reverse order of a list.
def rec prd reverse : forall a. <List(a) | r | Nil, Cons(a,r(a)) >(a) -> <List(a) | r | Nil, Cons(a,r(a)) >(a) :=
    \xs => case xs of {
        Nil => Nil,
        Cons(y, ys) => append (reverse ys) Cons(y, Nil)
    };

--  Maps a function over all elements of a list.
def rec prd map : forall a b. (a->b) -> <List(a) | r | Nil, Cons(a,r(a))>(a) -> <List(a) | r | Nil, Cons(b,r(b))>(b) :=
    \f xs => case xs of {
        Nil => Nil,
        Cons(y, ys) => Cons(f y, map f ys)
    };

--  Filters all predicates satisfying a given predicate.
def rec prd filter : forall a. (a-><Bool| True, False>) -> <List(a) | r | Nil, Cons(a,r(a))>(a) -> <List(a) | r | Nil, Cons(a,r(a))>(a) :=
    \f xs => case xs of {
        Nil => Nil,
        Cons(y, ys) => case (f y) of {
            True => Cons(y, filter f ys),
            False => filter f ys
        }
    };

--  Right fold over a list.
def rec prd foldr : forall a b. (a->b->b) -> b -> <List(a) | r| Nil, Cons(a,r(a))>(a) -> b :=
    \f init xs => case xs of {
        Nil => init,
        Cons(y, ys) => f y (foldr f init ys)
    };

--  Left fold over a list.
def rec prd foldl : forall a b. (b->a->b) -> b -> <List(a) | r | Nil, Cons(a,r(a))>(a) -> b :=
    \f acc xs => case xs of {
        Nil => acc,
        Cons(y, ys) => foldl f (f acc y) ys
    };

-- Special folds

--  Concat all elements of a list of lists.
def rec prd concat : forall a. <List(a) | r1 | Nil, Cons(<List(a) | r2 | Nil, Cons(a,r2(a))>(a),r1(a)) >(<List(a) | r2 | Nil, Cons(a,r2(a))>(a)) -> <List(a) | r3 | Nil, Cons(a,r3(a)) >(a) :=
    foldr append Nil;

--  Map a function over all the elements of a container and concatenate the resulting lists.
def rec prd concatMap := -- : forall a b. (a -> <List | r1 | Nil, Cons(b,r1) >(b)) -> <List | r2 | Nil, Cons(a,r2) >(a) -> <List | r3 | Nil, Cons(b,r3) >(b) :=
    \f xs => concat (map f xs);

--  Verify predicate for all elements of a list.
def rec prd all : forall a. (a -> <Bool|True,False>) -> <List(a) | r | Nil, Cons(a,r) >(a) -> <Bool | True, False> :=
    \p xs => (foldl and True) (map p xs);

--  Verify predicate for at least one element of a list.
def rec prd any : forall a. (a -> <Bool | True, False>) -> <List(a) | r | Nil, Cons(a,r) >(a) -> <Bool | True, False>  :=
    \p xs => (foldl or False) (map p xs);

--  Sum up list of natural numbers.
def rec prd sum : <List(a) | r | Nil, Cons(<Nat | r2 | Z, S(r2)>,r)>(<Nat | r2 | Z, S(r2)>) -> <Nat | r | Z, S(r)> :=
    foldl add Z;


--  Left scan over a list.
def rec prd scanl : forall a b. (b -> a -> b) -> b -> <List(a) | r1 | Nil, Cons(a,r1) >(a) -> <List(a) | r2 | Nil, Cons(b,r2) >(b) :=
    \f acc xs => Cons(acc, case xs of {
        Nil => Nil,
        Cons(y,ys) => scanl f (f acc y) ys
    });
