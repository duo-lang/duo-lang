import Peano;
import Bool;
import Function;

-- | The type of lists.
data List : (+a : CBV) -> CBV {
    Nil,
    Cons(a, List(a))
};

-- | Computes the length of a list.
def rec prd length : forall a. List(a) -> Nat :=
    \xs => case xs of {
        Nil => Z,
        Cons(x, xs) => S(length xs)
    };

-- | Append two lists together.
def rec prd append : forall a. List(a) -> List(a) -> List(a) :=
    \xs ys => case xs of {
        Nil => ys,
        Cons(z, zs) => Cons(z, append zs ys)
    };

-- | Reverse order of a list.
def rec prd reverse : forall a. List(a) -> List(a) :=
    \xs => case xs of {
        Nil => Nil,
        Cons(y, ys) => append (reverse ys) Cons(y, Nil)
    };

-- | Maps a function over all elements of a list.
def rec prd map : forall a b. (a -> b) -> List(a) -> List(b) :=
    \f xs => case xs of {
        Nil => Nil,
        Cons(y, ys) => Cons(f y, map f ys)
    };

-- | Filters all predicates satisfying a given predicate.
def rec prd filter : forall a. (a -> Bool) -> List(a) -> List(a) :=
    \f xs => case xs of {
        Nil => Nil,
        Cons(y, ys) => case (f y) of {
            True => Cons(y, filter f ys),
            False => filter f ys
        }
    };

-- | Right fold over a list.
def rec prd foldr : forall a b. (a -> b -> b) -> b -> List(a) -> b :=
    \f init xs => case xs of {
        Nil => init,
        Cons(y, ys) => f y (foldr f init ys)
    };

-- | Left fold over a list.
def rec prd foldl : forall a b. (b -> a -> b) -> b -> List(a) -> b :=
    \f acc xs => case xs of {
        Nil => acc,
        Cons(y, ys) => foldl f (f acc y) ys
    };

-- Special folds

-- | Concat all elements of a list of lists.
def rec prd concat : forall a. List(List(a)) -> List(a) :=
    foldr append Nil;

-- | Map a function over all the elements of a container and concatenate the resulting lists.
def rec prd concatMap : forall a b. (a -> List(b)) -> List(a) -> List(b) :=
    \f xs => concat (map f xs);

-- | Verify predicate for all elements of a list.
def rec prd all : forall a. (a -> Bool) -> List(a) -> Bool :=
    \p xs => (foldl and True) (map p xs);

-- | Verify predicate for at least one element of a list.
def rec prd any : forall a. (a -> Bool) -> List(a) -> Bool :=
    \p xs => (foldl or False) (map p xs);

-- | Sum up list of natural numbers.
def rec prd sum : List(Nat) -> Nat :=
    foldl add Z;


-- | Left scan over a list.
def rec prd scanl : forall a b. (b -> a -> b) -> b -> List(a) -> List(b) :=
    \f acc xs => Cons(acc, case xs of {
        Nil => Nil,
        Cons(y,ys) => scanl f (f acc y) ys
    });