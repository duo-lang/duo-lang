module Data.Maybe;

import Codata.Function;
import Data.Bool;

-- | The Maybe type encapsulates optional values.
data Maybe : (+a : CBV) -> CBV {
  Nothing,
  Just(a)
};

def prd maybe : forall a b. b -> (a -> b) -> Maybe@(a) -> b :=
  \x f m => case m of {
    Nothing => x,
    Just(y) => f y
  };

def prd isJust : Maybe@(Top) -> Bool :=
  \m => case m of {
    Nothing => False,
    Just(_) => True
 };

 def prd isNothing : Maybe@(Top) -> Bool :=
  \m => case m of {
    Nothing => True,
    Just(_) => False
  };

def prd fromMaybe : forall a. a -> Maybe@(a) -> a :=
  \x m => case m of {
    Nothing => x,
    Just(y) => y
  };
