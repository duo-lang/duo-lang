module Class.Ord;

import Data.Bool;
import Data.Peano;

-- | Enum type for the order two elements can be related to each other.
data Ordering : CBV {
    LT,
    EQ,
    GT
};

-- | Definition for type class of ordered types.
class Ord(+a : CBV) {
    Compare(a, a, return Ordering)
};

instance ordOrdering : Ord Ordering {
    Compare(x,y,k) => case x of {
        LT => case y of {
            LT => EQ,
            EQ => LT,
            GT => LT
        },
        EQ => case y of {
            LT => GT,
            EQ => EQ,
            GT => LT
        },
        GT => case y of {
            LT => GT,
            EQ => GT,
            GT => EQ
        }
    } >> k
};

instance ordBool : Ord Bool {
    Compare(x,y,k) => case x of {
        True => case y of {
            True => EQ,
            False => GT
        },
        False => case y of {
            True => LT,
            False => EQ
        }
    } >> k
};

instance ordNat : Ord Nat {
    Compare(x,y,k) => case x of {
        Z => case y of {
            Z => EQ >> k,
            S(n) => LT >> k
        },
        S(n) => case y of {
            Z => GT >> k,
            S(m) => Compare(n,m,k)
        }
    }
};

def prd trueGtFalse : Bool :=
    mu k. Compare[Bool](True, False, case { GT => True >> k, LT => False >> k, EQ => False >> k });

def prd twoLTthree : Bool :=
    mu k. Compare[Nat](S(S(Z)), S(S(S(Z))), case { GT => False >> k, LT => True >> k, EQ => False >> k });

def cmd main := #Print(twoLTthree, #ExitSuccess);