module Codata.Set;


-- data Bool : CBV{True, False};

codata Set: (+a:CBV) -> CBV {
    IsEmpty(return Bool), 
    Contains(a, return Bool),
    Insert(a, return Set),
    Union(Set, return Set)
};

def prd listToSet: List(a) -> Set(a) := cocase {
    Ap(l, IsEmpty(*))       => l Nil,
    Ap(l, Contains(i,*))    => elem l i,
    Ap(l, Insert(i,*))      => listToSet Cons(i,l),
    Ap(l, Union(s,*))       => foldr inserterFun s l,
    Ap(l, ToList(s,*))      => undefined
};


-- setToList :: Set(Nat) -> List(Nat)
-- ?????????????????????????????

-->COMPILATION

def prd listToSet : List(a) -> Set(a) := cocase {
    Ap(l, k1) => cocase {
        IsEmpty(k2)     => l == Nil >> k2
        Contains(k3)    => elemOf(l, i) >> k3
        Insert(i,k4)    => listToSet(Cons(i,l)) >> k4
        Union(s, k5)    => foldr inserterFun s l >> k5
    } >> k1
};
