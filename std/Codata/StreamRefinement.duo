module Codata.StreamRefinement;


import Codata.Function;
import Data.PeanoRefinement;
import Data.BoolRefinement;
import Data.ListRefinement;
import Data.TensorRefinement;

-- | The type of infinite Streams
refinement codata Stream : (+a : CBV) -> CBV {
    Head(return a),
    Tail(return Stream(a))
};

-- | Map a function over a stream.
def rec prd streamMap : forall a b. (a -> b) -> { Stream(c) | r | Head(return c), Tail(return r(c)) }(a) -> { Stream(c) | r1 |  Head(return c), Tail(return r1(c)) }(b) :=
  \f s => cocase {
    Head(*) => f (s.Head(*)),
    Tail(*) => streamMap f (s.Tail(*))
};

-- | Filter elements of a stream.
def rec prd streamFilter : forall a. (a -> <Bool | True, False>) -> { Stream(b) | r | Head(return b), Tail(return r(b)) }(a) -> {Stream(b) | r | Head(return b), Tail(return(r(b))) }(a) :=
   \p s => cocase {
     Head(*) =>  case p (s.Head(*)) of {
       True => s.Head(*),
       False => (streamFilter p (s.Tail(*))).Head(*)
     },
     Tail(*) => streamFilter p (s.Tail(*))
   };

 -- | Interleave two streams.
def rec prd interleave : forall a. { Stream(b) | r | Head(return b), Tail(return r(b)) }(a) -> { Stream(b) | r | Head(return b), Tail(return r(b)) }(a) -> { Stream(b) | r | Head(return b), Tail(return r(b)) }(a) :=
   \s t => cocase {
     Head(*) => s.Head(*),
     Tail(*) => interleave t (s.Tail(*))
   };

-- | Zip two streams to a stream of pairs.
def rec prd zip : forall a b.  { Stream(c) | r | Head(return c), Tail(return r(c)) }(a) -> { Stream(c) | r | Head(return c), Tail(return r(c)) }(b) -> { Stream(c) | r | Head(return c), Tail(return r(c)) }(<Tensor(c,d) | MkTensor(c,d)>(a, b)) :=
   \s t => cocase {
     Head(*) => MkTensor(s.Head(*), t.Head(*)),
     Tail(*) => zip (s.Tail(*)) (t.Tail(*))
   };

-- | Take n elements of a stream.
def rec prd take : forall a. <Nat | r | Z,S(r)> -> { Stream(b) | r1 | Head(return b), Tail(return r1(b)) }(a) -> <List(b) | r2 | Nil, Cons(b,r2(b))>(a) :=
   \n s => case n of {
     Z => Nil,
     S(n) => Cons(s.Head(*), take n (s.Tail(*)))
   };

-- | Return a constant stream for the given element.
def rec prd constStream : forall a. a -> { Stream(b) | r1 | Head(return b), Tail(return r1(b)) }(a) :=
  \x => cocase {
    Head(*) => x,
    Tail(*) => constStream x
 };

-- | Return a stream of repeated applications of f to x.
def rec prd iterate : forall a. (a -> a) -> a -> { Stream(b) | r1 | Head(return b), Tail(return r1(b)) }(a):=
  \f x => cocase {
    Head(*) => x,
    Tail(*) => iterate f (f x)
  };

-- | Return a stream starting with natural number n.
def prd from : <Nat | r | Z,S(r)> -> { Stream(a) | r1 | Head(return a), Tail(return r1(a)) }(<Nat | r2| Z, S(r2)>) :=
  iterate (\n => S(n));
