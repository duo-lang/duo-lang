module Syntax.CST.Types where

import Syntax.Common
import Syntax.Kinds
import Data.List.NonEmpty (NonEmpty)

---------------------------------------------------------------------------------
-- Parse Types
---------------------------------------------------------------------------------

data Typ where
  TyVar :: TVar -> Typ
  TyXData :: DataCodata -> Maybe TypeName -> [XtorSig] -> Typ
  TyNominal :: TypeName -> [Typ] -> Typ
  TyRec :: TVar -> Typ -> Typ
  TyTop :: Typ
  TyBot :: Typ
  -- | A chain of binary type operators generated by the parser
  -- Lowering will replace "TyBinOpChain" nodes with "TyBinOp" nodes.
  TyBinOpChain :: Typ -> NonEmpty (BinOp, Typ) -> Typ
  -- | A binary type operator waiting to be desugared
  -- This is used as an intermediate representation by lowering and
  -- should never be directly constructed elsewhere.
  TyBinOp :: Typ -> BinOp -> Typ -> Typ
  TyParens :: Typ -> Typ
  deriving Show

data XtorSig = MkXtorSig
  { sig_name :: XtorName
  , sig_args :: LinearContext
  }
  deriving Show

data PrdCnsTyp where
  PrdType :: Typ -> PrdCnsTyp
  CnsType :: Typ -> PrdCnsTyp
  deriving Show

type LinearContext = [PrdCnsTyp]

linearContextToArity :: LinearContext -> Arity
linearContextToArity = map f
  where
    f (PrdType _) = Prd
    f (CnsType _) = Prd

data TypeScheme = TypeScheme
  { ts_vars :: [TVar]
  , ts_monotype :: Typ
  }
  deriving Show

------------------------------------------------------------------------------
-- Data Type declarations
------------------------------------------------------------------------------

data DataDecl = NominalDecl
  { data_refined :: IsRefined
  , data_name :: TypeName
  , data_polarity :: DataCodata
  , data_kind :: Kind
  , data_xtors :: [XtorSig]
  , data_params :: TParams
  }
