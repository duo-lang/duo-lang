module Parser;

import Data.Bool;
import Codata.Function;
import Data.List;
import Data.Peano;
import Prelude;
import Data.Cofunction;
import Data.Unit;
-- a backtracking parser combinator library


data ParseResult : CBV {
    PR(List(Nat),return Unit)
};


-- a parser consumes a List(Nat) and produces two continuations:
-- a success continuation of type ParseResult and a failure continuation.
-- the ParseResult contains the remaining input and, crucially, 
-- another "backtracking" continuation
codata Parser :  CBV {
    Parse(List(Nat),return ParseResult,return Unit)
}; 


def prd lit : Nat -> Parser := \n => cocase {
    Parse(xs,ks,kf) => xs >> case {
        Nil => MkUnit >> kf,
        Cons(y, ys) => nateq y n >> case {
            True => PR(ys,kf) >> ks,
            False => MkUnit >> kf
        } 
    } 
} ; 


def prd success : Parser := cocase {
    Parse(xs,ks,kf) => PR(xs,kf) >> ks
};


def prd failure : Parser := cocase {
    Parse(xs,ks,kf) => MkUnit >> kf
};

def prd seq : Parser -> Parser -> Parser := \p1 p2 => cocase {
    Parse(xs,ks,kf) => p1 >> Parse(xs, case { PR(l,kf2) => p2 >> Parse(l,ks,kf2) } ,kf) 
};

def prd alt : Parser -> Parser -> Parser := \p1 p2 => cocase {
    Parse(xs,ks,kf) => p1 >> Parse(xs,ks, mu q. p2 >> Parse(xs,ks,kf) )
};

def rec prd many1 : Parser -> Parser := \p => cocase {
    Parse(xs,ks,kf) => p >> Parse(xs,case { PR(l,kf2) => alt success (many1 p) >> Parse(l,ks,kf2)}, kf)
};

def prd many : Parser -> Parser := \p => alt success (many1 p);


def prd l1 : List(Nat) := Cons(1,Cons(2,Cons(3,Nil)));
def prd l2 : List(Nat) := Cons(3,Cons(2,Cons(1,Nil)));

def prd parseOne : (Parser:CBV) := lit 1;
 
def cmd test1 := parseOne >> Parse(l1,print,print) ;
def cmd test2 := parseOne >> Parse(l2,print,print) ;

def prd parseOneTwo : (Parser:CBV) := seq (lit 1) (lit 2);

def cmd test3 := parseOneTwo >> Parse(l1,print,print) ;
def cmd test4 := parseOneTwo >> Parse(l2,print,print) ;

def prd parseTwoOrOne : (Parser:CBV) := seq (alt (lit 2) (lit 1)) (lit 2);

def cmd test5 := parseTwoOrOne >> Parse(l1,print,print) ;
def cmd test6 := parseTwoOrOne >> Parse(l2,print,print) ;

def prd parseOnes : (Parser:CBV) := seq (alt (seq (lit 1) (lit 1)) (lit 1)) (lit 1);

def prd l3 : List(Nat) := Cons(1,Cons(1,Cons(1,Nil)));

def cmd test7 := parseOnes >> Parse(l3,print,print) ;

def prd parseOneTwoThree : Parser := seq (seq (lit 1) (lit 2)) (lit 3);
def prd parseOneTwoFour : Parser := seq (seq (lit 1) (lit 2)) (lit 4);

-- ( 123 | 12 | 35)^* 5 6
def prd parseComplicated : (Parser:CBV) := seq (seq (many (alt (alt parseOneTwoThree parseOneTwo) (seq (lit 3) (lit 5)))) (lit 5)) (lit 6);

def prd l4 : List(Nat) := Cons(1,Cons(2,Cons(3,Cons(5,Nil))));
def prd l5 : List(Nat) := Cons(1,Cons(2,Cons(3,Cons(5,Cons(5,Nil)))));
def prd l6 : List(Nat) := Cons(1,Cons(2,Cons(3,Cons(6,Cons(5,Nil)))));
def prd l7 : List(Nat) := Cons(1,Cons(2,Cons(5,Nil)));
def prd l8 : List(Nat) := Cons(1,Cons(2,Cons(3,Cons(5, Cons(5,Nil)))));
def prd l9 : List(Nat) := Cons(1,Cons(2,Cons(3,Cons(5, Cons(5,Cons(6,Nil))))));

def cmd test8  := parseComplicated >> Parse(l4,print,print) ;
def cmd test9  := parseComplicated >> Parse(l5,print,print) ;
def cmd test10 := parseComplicated >> Parse(l6,print,print) ;
def cmd test11 := parseComplicated >> Parse(l7,print,print) ;
def cmd test12 := parseComplicated >> Parse(l8,print,print) ;
def cmd test13 := parseComplicated >> Parse(l9,print,print) ;

-- instead of modeling the parser as a codata producer, we could
-- also model it as a data consumer. Is this better in any way?
data Parser2 :  CBV {
    Parse2(List(Nat),return ParseResult,return Unit)

}; 

def cns lit2 : Parser2 :=  case {
    Parse2(xs,ks,kf) => xs >> case {
        Nil => MkUnit >> kf,
        Cons(y, ys) => nateq y 0 >> case {
            True => PR(ys,kf) >> ks,
            False => MkUnit >> kf
        } 
    } 
} ; 

