module Compilertests;

-- These examples serve primarily as a testsuite for the compiler.
-- Do not expect the following examples to be sensible or understandable
import Codata.Function;
import Data.Peano;
import Data.Bool;
import Prelude;

-- Symmetric system:

def prd id1 : forall a. a -> a := cocase { Ap(x,k) => x >> k };

def prd idPolyTwo : forall a b. (a /\ b) -> (a \/ b) := cocase { Ap(x,k) => x >> k };

def prd id : Nat -> Nat := cocase { Ap(x,k) => x >> k };

def prd idNominal : Nat -> Nat := cocase { Ap(x,k) => x >> k };

-- Asymmetric system:

def prd idPoly : forall a. a -> a := cocase { Ap(x,*) => x };

def prd idPolyThree : forall a b. (a /\ b) -> (a \/ b) := cocase { Ap(x,*) => x };

def prd idTwo : Nat -> Nat := cocase { Ap(x,*) => x };

destructor ApS(CBV,return CBV): CBV;
destructor Ap2(CBV,CBV,return CBV) : CBV;
destructor Ap3(CBV,CBV,CBV,return CBV) : CBV;
constructor TT;
constructor FF;
constructor Succ(CBV);
constructor Zero;

-- Check subsumption for negative typeschemes
def cns subsumptionEx1 : < TT > := case { TT => #ExitSuccess, FF => #ExitSuccess};
def cns subsumptionEx2 : (Nat:CBV) := mu n. #ExitSuccess; 



def prd fixS := cocase { ApS(f,k) =>
             cocase { ApS(x,k) => f >>
               ApS( cocase { ApS(v,k) => x >> ApS(x,ApS(v,k)) },k) } >>
                 ApS( cocase { ApS(x,k) => f >>
                   ApS( cocase { ApS(v,k) => x >> ApS(x,ApS(v,k)) },k) },k) };

def prd addNominal := cocase { Ap2(n,m,k) => fixS >> ApS( cocase { ApS(alpha,k) => cocase { ApS(m,k) => m >> case { Z => n >> k, S(p) => alpha >> ApS(p,mu w. S(w) >> k) }} >> k },ApS(m,k)) };
def prd mltNominal := cocase { Ap2(n,m,k) => fixS >> ApS(cocase { ApS(alpha,k) => cocase { ApS(m,k) => m >> case { Z => Z >> k, S(p) => alpha >> ApS(p,mu w. addNominal >> Ap2(n,w,k)) } } >> k },ApS(m,k))};

def prd ex1 : forall a. { ApS(a,return a) } := cocase { ApS(x,k) => x >> k };

def prd ex2 : < Succ(< Zero >) > := Succ(Zero);

def prd ex3 : forall a. { Ap3(< TT , FF >, a, a,return a) } := cocase { Ap3(b,x,y,k) => b >> case { TT => x >> k, FF => y >> k }};

def prd ex4 : forall a b. { Ap3(<TT,FF>, a, b, return a \/ b) } := cocase { Ap3(b,x,y,k) => b >> case { TT => x >> k, FF => y >> k }};

def prd ex5 :  forall a b. { ApS({ ApS(a \/ b,return b) },return { ApS(a,return b) }) } := cocase { ApS(f,k) => (cocase { ApS(x,k) => f >> ApS(x,mu y. f >> ApS(y,k))}) >> k};

def prd ex6 : { ApS(Bool,return Bool) } := cocase { ApS(x,k) => x >> case { True => False >> k, False => True >> k }};

def prd ex7 : { ApS(Bool,return (Bool \/ Nat)) } := cocase { ApS(x,k) => x >> case { True => False >> k, False => Z >> k }};

def prd ex8 : { ApS(Bool,return (Nat \/ Bool)) } := cocase { ApS(x,k) => x >> case { True => False >> k, False => Z >> k }};

def prd ex9 : { Ap2(Nat,Nat,return Nat) } := cocase { Ap2(n,m,k) => fixS >> ApS( cocase { ApS(alpha,k) => cocase { ApS(m,k) => m >> case { Z => n >> k, S(p) => alpha >> ApS(p,mu w. S(w) >> k) }} >> k },ApS(m,k)) };

def prd ex10 : forall t0. { Ap2((t0 /\ Nat),Nat,return (t0 \/ Nat)) } := cocase { Ap2(n,m,k) => fixS >> ApS(cocase { ApS(alpha,k) => cocase { ApS(m,k) => m >> case { Z => Z >> k, S(p) => alpha >> ApS(p,mu w. addNominal >> Ap2(n,w,k)) } } >> k },ApS(m,k))};

def prd ex11 : forall t0. { Ap2((t0 /\ Nat),Nat,return (t0 \/ Nat)) } := cocase { Ap2(n,m,k) => fixS >> ApS(cocase { ApS(alpha,k) => cocase { ApS(m,k) => m >> case { Z => S(Z) >> k, S(p) => alpha >> ApS(p,mu w. mltNominal >> Ap2(n,w,k)) } } >> k },ApS(m,k)) };

def prd ex12 : forall t0. { Ap2((t0 /\ Nat),Nat,return (t0 \/ Nat)) } := cocase { Ap2(n,m,k) => fixS >> ApS(cocase { ApS(alpha,k) => cocase { ApS(n,k) => cocase { ApS(m,k) => m >> case { Z => n >> k, S(mp) => n >> case { Z => n >> k, S(np) => alpha >> ApS(np,ApS(mp,k)) }}} >> k } >> k },ApS(n,ApS(m,k)))};
