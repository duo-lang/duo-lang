import LinearLogic;
import Peano;
import Bool;
import Function;

data List : (+a : CBV) -> CBV {
    Nil,
    Cons(a, List(a))
};

def rec length[*] : forall a. List(a) -> Nat :=
    \xs => case xs of {
        Nil => Z,
        Cons(x, xs) => S(length xs)
    };

def rec map[*] : forall a b. (a -> b) -> List(a) -> List(b) :=
    \f xs => case xs of {
        Nil => Nil,
        Cons(y, ys) => Cons(f y, map f ys)
    };

def rec filter[*] : forall a. (a -> Bool) -> List(a) -> List(a) :=
    \f xs => case xs of {
        Nil => Nil,
        Cons(y, ys) => case (f y) of {
            True => Cons(y, filter f ys),
            False => filter f ys
        }
    };

def rec foldr[*] : forall a b. (a -> b -> b) -> b -> List(a) -> b :=
    \f init xs => case xs of {
        Nil => init,
        Cons(y, ys) => f y (foldr f init ys)
    };

def rec foldl[*] : forall a b. (b -> a -> b) -> b -> List(a) -> b :=
    \f acc xs => case xs of {
        Nil => acc,
        Cons(y, ys) => foldl f (f acc y) ys
    };
