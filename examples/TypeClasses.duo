module TypeClasses;


import Bool;
import List;

-- | Class definition.
class Eq(+a : CBV) {
  Equals(a, a, return Bool),
  Differ(a, a, return Bool)
};


-- | Instance definition.
instance Eq Bool {
  Equals(x, y, k) => or (and x y) (not (or x y)) >> k,
  Differ(x, y, k) => and (or x y) (not (and x y)) >> k
};

-- | Usage with type class constraint.
def rec prd elem : forall a. Eq a, a <: a => a -> List(a) -> Bool :=
  \e l => case l of {
        Nil => False,
        Cons(x, xs) => or (mu k. Equals(e, x, k)) (elem e xs)
    };
