module Subsumption;

import Codata.Function;
import Data.Peano;
import Data.Bool;

-- Subsumptions which should hold
constructor ApS(CBV, return CBV): CBV;

def rec prd ex01    : forall a. { ApS(a,return a) }                                   := ex01;
def rec prd ex01sub : { ApS(< True >,return < True >) }                               := ex01;

def rec prd ex02    : forall a. { ApS(a,return a) }                                   := ex02;
def rec prd ex02sub : { ApS(< True >,return < True >) }                               := ex02;

def rec prd ex03    : { ApS(< True >,return < True >) }                               := ex03; 
def rec prd ex03sub : { ApS(< True >,return < True >) }                               := ex03;

def rec prd ex04    : forall a. { ApS(< True >,return < True >) }                     := ex04;
def rec prd ex04sub : { ApS(< True >,return < True >) }                               := ex04;

def rec prd ex05    : { ApS(< True >,return < True >) }                               := ex05;
def rec prd ex05sub : forall a. { ApS(< True >,return < True >) }                     := ex05;

def rec prd ex06    : { ApS(< True , False >,return < True >) }                       := ex06;
def rec prd ex06sub : { ApS(< True >,return < True , False >) }                       := ex06;

def rec prd ex07    : { ApS( SNat , return { ApS( SNat , return SBool ) } ) }             := ex07;
def rec prd ex07sub : { ApS( SNat , return { ApS( SNat , return SBool ) } ) }             := ex07;

def rec prd ex08    : SNat                                                            := ex08;
def rec prd ex08sub : SNat                                                            := ex08;

def rec prd ex09    : { ApS(SNat,return SBool) }                                        := ex09;
def rec prd ex09sub : { ApS(SNat,return SBool) }                                        := ex09; 

def rec prd ex10    : rec a.  <Z, S(< S(a) >)>                                       := ex10;
def rec prd ex10sub : rec a. <Z, S(a)>                                               := ex10;

def rec prd ex11    : { ApS(rec a. < Z, S(a) >, return (rec a.  <Z, S(< S(a) >)>) ) } := ex11;
def rec prd ex11sub : { ApS(rec a.  <Z, S(< S(a) >)>, return (rec a. < Z, S(a) >) ) } := ex11;

def rec prd ex12    : SNat                                                            := ex12;
def rec prd ex12sub : SNat \/ SNat                                                     := ex12;

def rec prd ex13    : rec a. < Z, S(a) >                                             := ex13;
def rec prd ex13sub : rec a. < Z > \/ < S(a) >                                       := ex13;

def rec prd ex14    : < S(<Z>) >                                                     := ex14;
def rec prd ex14sub : < Z> \/ < S(<Z>) >                                             := ex14;

def rec prd ex15    : forall t0. (t0 -> (rec r4.(t0 \/ < S( r4 ) >)))                := ex15;
def rec prd ex15sub : (rec b. < Z , S( b ) > ) -> (rec c. < Z , S( c ) > )           := ex15;
