-- Function Type

codata Fun : (-a : CBV, +b : CBV) -> CBN {
    Ap(a)[b]
};

type operator -> rightassoc at 0 := Fun;

-- | The polymorphic identity function
def id[*] : forall a. a -> a :=
  \x => x;

-- | Function composition
def compose[*] :=
  \f g x => f (g x);

-- | Apply a function two times to its argument
def twice[*] :=
  \f x => f (f x);

-- | Apply a function three times to its argument
def thrice[*]  :=
  \f x => f (f (f x));

def fix[*] := cocase { Ap(f)[k] =>
             cocase { Ap(x)[k] => f >>
               Ap( cocase { Ap(v)[k] => x >> Ap(x)[Ap(v)[k]] })[k] } >>
                 Ap( cocase { Ap(x)[k] => f >>
                   Ap( cocase { Ap(v)[k] => x >> Ap(x)[Ap(v)[k]] })[k] })[k] };

def fixLazy[*] := cocase { Ap(f)[k] =>
                 cocase { Ap(x)[k] => x >>
                   Ap(x)[mu xx. f >> Ap(xx)[k]] } >>
                      Ap(cocase { Ap(x)[k] => x >>
                        Ap(x)[mu xx. f >> Ap(xx)[k]] })[k]};

def omega[*] :=
  mu k.fixLazy >> Ap(id)[k];
