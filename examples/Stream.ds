
import Function;

-- | The type of infinite Streams
codata Stream : (+a : CBV) -> CBV {
    Head(return a),
    Tail(return Stream(a))
};

-- | Map a function over a stream.
def rec prd streamMap : forall a b. (a -> b) -> Stream(a) -> Stream(b) :=
  \f s => cocase {
    Head(*) => f (s.Head(*)),
    Tail(*) => streamMap f (s.Tail(*))
};

-- | Return a constant stream for the given element.
def rec prd constStream : forall a. a -> Stream(a) :=
  \x => cocase {
    Head(*) => x,
    Tail(*) => constStream x
};
