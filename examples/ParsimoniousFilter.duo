import Function;
import LinearLogic;
import List;
import Bool;

def rec prd filterHelper := \p l => case l of {
    Nil => cocase {
        MkPar(k1,*) => MkUnit
    },
    Cons(x,xs) => case p x of {
        True =>
            cocase {
                MkPar(k1,k2) =>
                    filterHelper p xs >> MkPar(mu ys. Cons(x,ys) >> k1, k2)
            },
        False =>
            cocase {
                MkPar(k1,k2) =>
                    filterHelper p xs >> MkPar(k1, mu y. xs >> k1)
            }
    }
};

def prd filter  : forall a. (a -> Bool) -> List(a) -> List(a) := \p l => mu k. filterHelper p l >> MkPar(k, mu y. l >> k);
def prd filter2 : forall a. (a -> Bool) -> List(a) -> List(a) := \p l => mu k. (filterHelper p l).MkPar(k,*) >> mu y. l >> k;
