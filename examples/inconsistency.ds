prd fixLazy := comatch { 'Ap(f)[k] => 
                 comatch { 'Ap(x)[k] => x >> 
                   'Ap(x)[mu* xx. f >> 'Ap(xx)[k]] } >> 
                      'Ap(comatch { 'Ap(x)[k] => x >> 
                        'Ap(x)[mu* xx. f >> 'Ap(xx)[k]] })[k]};

prd id := comatch { 'Ap(x)[k] => x >> k };

prd omega := mu k.fixLazy >> 'Ap(id)[k];



prd omega2 := mu v. comatch { 'Ap(x)[k] => x >> 'Ap(x)[k] }
                    >>
                    'Ap( comatch { 'Ap(x)[k] => x >> 'Ap(x)[k] })[v];

def omega3 := comatch { Ap(x) => x.Ap(x) }.Ap(comatch { Ap(x) => x.Ap(x)});


def foo := comatch { Ap(x) => x.Ap(x) };

def bar := bar.Ap(bar);
