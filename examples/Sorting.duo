import Function;
import Bool;
import List;
import Peano;
import LinearLogic;
import Prelude;

data Ordering {
    LT,
    EQ,
    GT
};

def rec prd splitAt : forall a. Nat -> List(a) -> Tensor(List(a), List(a)) :=
    \n xs => case n of {
        Z => MkTensor(Nil, xs),
        S(n) => case xs of {
            Nil => MkTensor(Nil, Nil),
            Cons(x, xs) => case splitAt n xs of {
                MkTensor(left, right) => MkTensor(Cons(x, left), right)
            }
        }
    };

def rec prd splitHalvesHelper : forall a. List(a) -> List(a) -> Notp(Tensor(List(a), List(a))) -> Void :=
    \xs ys k => case k of {
        MkNotp(k) => case xs of {
            Nil => mu j. MkTensor(Nil, ys) >> k,
            Cons(x1, xs) => case xs of {
                Nil => mu j. MkTensor(Nil, ys) >> k,
                Cons(x2, xs) => case ys of {
                    Nil => impossiblePrd,
                    Cons(y, ys) => splitHalvesHelper xs ys (MkNotp(
                        mu tensor. case tensor of {
                            MkTensor(left, right) =>
                                MkTensor(Cons(y, left), right)
                        } >> k
                    ))
                }
            }
        }
    };

def prd splitHalves : forall a. List(a) -> Tensor(List(a), List(a)) :=
    \xs => mu k. splitHalvesHelper xs xs MkNotp(k) >> impossibleCns;

def rec prd merge : forall a. (a -> a -> Ordering) -> List(a) -> List(a) -> List(a) :=
    \f left right => case left of {
        Nil => right,
        Cons(x, xs) => case right of {
            Nil => left,
            Cons(y, ys) => case f x y of {
                LT => Cons(x, merge f xs right),
                EQ => Cons(x, merge f xs right),
                GT => Cons(y, merge f left ys)
            }
        }
    };

def rec prd sort : forall a. (a -> a -> Ordering) -> List(a) -> List(a) :=
    \f xs => case xs of {
        Nil => Nil,
        Cons(y, ys) => case ys of {
            Nil => Cons(y, Nil),
            Cons(y2, ys2) => case splitHalves xs of {
                MkTensor(left, right) => merge f (sort f left) (sort f right)
            }
        }
    };

def rec prd compare : Nat -> Nat -> Ordering :=
    \x y => case x of {
        Z => case y of {
            Z => EQ,
            S(y) => LT
        },
        S(x) => case y of {
            Z => GT,
            S(y) => compare x y
        }
    };

-- Examples

def prd testlist := Cons(5, Cons(2, Cons(8, Cons(1, Cons(4, Cons(7, Cons(3, Cons(6, Cons(10, Cons(9, Nil))))))))));

def cmd main := #Print(sort compare testlist, #ExitSuccess);
