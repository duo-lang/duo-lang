
import Bool;

-- | Class definition.
class Eq(+a : CBV) {
  Equals(a, a, return Bool),
  Differ(a, a, return Bool)
};


-- | Instance definition.
instance Eq Bool {
  Equals(x, y, k) => or (and x y) (not (or x y)),
  Differ(x, y, k) => and (not (and x y)) (or x y)
};

-- -- | Usage with type class constraint.
-- def rec prd elem : forall a. Eq a, a <: a => a -> List(a) -> Bool :=
--   \e l => case l of {
--         Nil => False,
--         Cons(x, xs) => or Equals(e,x) (elem e xs)
--     };
