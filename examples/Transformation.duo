module Transformation;

import Data.Peano; -- Num is defined here, syntactic sugar for Peano number is given with Z=0, S(Z)=1, S(S(Z))=2, ...
import Data.Maybe; -- encapsulate optional types with Maybe
import Data.Bool; -- Bool is defined here

--------------------------------------------------------
-- Lists 
--------------------------------------------------------
-- define a list and its functions as described in Rendel et al. (2015) with data
data List : CBV {
    Nil,
    Cons(Nat,List)
};

def rec prd index : List -> Nat -> Maybe(Nat) :=
    \l n => case l of {
        Nil => Nothing,
        Cons(head,tail) => case n of {
            Z => Just(head),
            S(num) => index tail num
        }
};

-- define a list and its functions as described in Rendel et al. (2015) with codata
codata CoList : CBV {
    Index(Nat, return Maybe(Nat))
};

def prd nil : CoList := cocase {
    Index(n,*) => Nothing
};

def rec prd cons : Nat -> CoList -> CoList := \head tail => cocase {
    Index(n,*) => case n of {
        Z => Just(head),
        S(num) => tail.Index(num,*)
    }
};

--examples
def prd listWithData := Cons(1,Cons(2,Cons(3,Nil)));
def prd listWithCodata := cons 1 (cons 2 (cons 3 nil));


--------------------------------------------------------
-- Bool and CoBool
--------------------------------------------------------

-- on data
def prd ifThenElse : Bool -> Nat -> Nat -> Nat :=
    \b e1 e2 => case b of {
        True => e1,
        False => e2
    };

def prd id : Bool -> Bool := 
    \b => case b of {
        True => b,
        False => b
    };

codata CoBool : CBV {
    IfThenElse(Nat, Nat, return Nat),
    Id(return Bool)
    };

def prd true : CoBool := cocase {
    IfThenElse(e1,e2,*) => e1,
    Id(*) => True
    };

def prd false : CoBool := cocase {
    IfThenElse(e1,e2,*) => e2,
    Id(*) => False
    };

-- examples
def prd ifThenElseWithData := ifThenElse True 1 0;
def prd ifThenElseWithCodata := true.IfThenElse(1,0,*);

--------------------------------------------------------
-- main
def cmd main := #Print(index listWithData 2, #ExitSuccess);



