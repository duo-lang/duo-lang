import Function;
import LinearLogic;
import List;
import Bool;

prd rec filterHelper := \p l => case l of {
    Nil => cocase {
        MkPar[k1,k2] => MkUnit >> k2
    },
    Cons(x,xs) => case p x of {
        True =>
            cocase {
                MkPar[k1,k2] =>
                    filterHelper p xs >> MkPar[mu ys. Cons(x,ys) >> k1, k2]
            },
        False =>
            cocase {
                MkPar[k1,k2] =>
                    filterHelper p xs >> MkPar[k1, mu y. xs >> k1]
            }
    }
};

prd filter  := \p l => mu k. filterHelper p l >> MkPar[k, mu y. l >> k];
prd filter2 := \p l => mu k. (filterHelper p l).MkPar[k,*] >> mu y. l >> k;
