# Standard Prelude

# Bool

data Bool : Type CBV { True, False };

def not := \b => match b with { True => False, False => True};

def ifthenelse := \b => \e1 => \e2 => match b with { True => e1, False => e2 };

def and := \b1 => \b2 => ifthenelse b1 b2 False;

def or := \b1 => \b2 => ifthenelse b1 True b2;

# Peano natural numbers

data Nat : Type CBV { Z, S(Nat) };

def rec add := \n => \m => match n with { Z => m
                                        , S(n) => S(add n m)};

def rec mul := \n => \m => match n with { Z => Z
                                        , S(n) => add m (mul n m)};

def rec nateq := \n => \m => match n with { Z => match m with { Z => True, S(m) => False}
                                          , S(n) => match m with { Z => False, S(m) => nateq n m}};

# Unit

data Unit : Type CBV { Unit };


# Other functions

def id := \x => x;

# Generic print consumer
cns print := mu x.Print(x);