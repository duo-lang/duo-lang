

-- | The function type
codata Fun : (-a : CBV, +b : CBV) -> CBN {
    Ap(a,return b)
};

type operator -> rightassoc at 0 := Fun;

-- | The polymorphic identity function
def prd id : forall a. a -> a :=
  \x => x;

-- | Function composition
def prd compose : forall a b c. (a -> b) -> (b -> c) -> (a -> c) :=
  \f g x => f (g x);

-- | Apply a function two times to its argument
def prd twice : forall a b. (a -> a /\ b) -> a -> b :=
  \f x => f (f x);

-- | Apply a function three times to its argument
def prd thrice  : forall a b. (a -> a /\ b) -> a -> b :=
  \f x => f (f (f x));

def prd id2 : forall a. a -> a := 
  cocase { Ap(x,k) => x >> k };

def prd fix : forall a b c. ((c -> b) -> (a /\ (c -> b))) -> a := cocase { Ap(f,k) =>
             cocase { Ap(x,k) => f >>
               Ap( cocase { Ap(v,k) => x >> Ap(x,Ap(v,k)) },k) } >>
                 Ap( cocase { Ap(x,k) => f >>
                   Ap( cocase { Ap(v,k) => x >> Ap(x,Ap(v,k)) },k) },k) };

def prd fixLazy : forall a. (a -> a) -> a := cocase { Ap(f,k) =>
                 cocase { Ap(x,k) => x >>
                   Ap(x,mu xx. f >> Ap(xx,k)) } >>
                      Ap(cocase { Ap(x,k) => x >>
                        Ap(x,mu xx. f >> Ap(xx,k)) },k)};

def prd omega : Bot :=
  mu k.fixLazy >> Ap(id,k) ;
