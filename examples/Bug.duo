module Bug;

codata Fun : (-a : CBV, +b : CBV) -> CBV {
    Ap(a,return b)
};

type operator -> rightassoc at 0 := Fun;
refinement data List : (+a : CBV) -> CBV {
    Nil,
    Cons(a, List(a))
};

def rec prd append : forall a. <List | r1 | Nil, Cons(a,r1) > (a) -> <List | r2 | Nil, Cons(a,r2) > (a) -> <List | r3 | Nil, Cons(a,r3)>(a) :=
    \xs ys => case xs of {
        Nil => ys,
        Cons(z, zs) => Cons(z, append zs ys)
    };
