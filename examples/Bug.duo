module Bug;

refinement data List : (+a : CBV) -> CBV {
    Nil,
    Cons(a, List(a))
};

constructor N;
constructor C(CBV, CBV);

-- | The function type
codata Fun : (-a : CBV, +b : CBV) -> CBV {
    Ap(a,return b)
};

type operator -> rightassoc at 0 := Fun;

--def rec prd tail : forall a. <List | r | Nil, Cons(a,r(a))>(a) -> <List | r | Nil, Cons(a,r(a))>(a) := 
--    \xs => case xs of {
--        Nil => Nil,
--        Cons(z,zs) => zs
--        };

def rec prd tail : forall a. (rec r. < N, C(a,r) >) -> (rec r. <N,C(a,r)>):=
  \xs => case xs of {
    N => N,
    C(_, xs) => xs
 };


