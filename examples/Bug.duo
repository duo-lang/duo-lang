module Bug;


refinement data List : (+a : CBV) -> CBV {
    Nil,
    Cons(a, List(a))
};

codata Fun : (-a : CBV, +b : CBV) -> CBV {
    Ap(a,return b)
};

type operator -> rightassoc at 0 := Fun;

refinement data Nat {
    Z,
    S(Nat)
};

data Bool : CBV {
    True,
    False
};

def rec prd append : forall a. <List(b) | r | Nil, Cons(b,r(b)) >(a) -> <List(b) | r | Nil, Cons(b,r(b))>(a) -> <List(b) | r | Nil, Cons(b,r(b)) >(a) :=
   \xs ys => case xs of {
        Nil => ys,
        Cons(z, zs) => Cons(z, append zs ys)
    };
