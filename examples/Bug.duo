module Bug; 

codata Fun : (-a : CBV, +b : CBV) -> CBV {
    Ap(a,return b)
};

type operator -> rightassoc at 0 := Fun;

data Nat {
    Z,
    S(Nat)
};

refinement data List : (+a : CBV) -> CBV {
    Nil,
    Cons(a, List(a))
};

--def prd x := Cons(Z,Cons(Z,Cons(Z,Nil)));
--def prd x := Cons(Z,Cons(Z,Cons(S(Z),Nil)));
--  Append two lists together.
def rec prd append :=
    \xs ys => case xs of {
        Nil => ys,
        Cons(z, zs) => Cons(z, append zs ys)
    };

def rec prd reverse :=
    \xs => case xs of {
        Nil => Nil,
        Cons(y, ys) => append (reverse ys) Cons(y, Nil)
    };
