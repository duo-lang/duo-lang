module Bug;

codata Fun : (-a : CBV, +b : CBV) -> CBV {
    Ap(a,return b)
};

type operator -> rightassoc at 0 := Fun;
refinement data List : (+a : CBV) -> CBV {
    Nil,
    Cons(a, List(a))
};



def rec prd tail : forall a. <List | r | Nil, Cons(a,r(a))>(a) -> <List | r | Nil, Cons(a,r(a))>(a) := 
    \xs => case xs of {
        Nil => Nil,
        Cons(z,zs) => zs
        };
