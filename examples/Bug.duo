module Bug;

codata Fun : (-a : CBV, +b : CBV) -> CBV {
    Ap(a,return b)
};

type operator -> rightassoc at 0 := Fun;
refinement data List : (+a : CBV) -> CBV {
    Nil,
    Cons(a, List(a))
};

data ListNom : (+a :CBV) -> CBV {
  NilNom,
  ConsNom(a,ListNom(a))
};

--def rec prd tailNom := 
--  \xs => case xs of {
--    NilNom => NilNom,
--    ConsNom(z,zs) => zs
--};

--constructor N;
--constructor C(CBV,CBV);
--def rec prd tailStr := 
--  \xs => case xs of {
--    N => N,
--    C(z,zs) => zs
--  };


def rec prd tail : forall a. <List | r | Nil, Cons(a,r(a))>(a) -> <List | r | Nil, Cons(a,r(a))>(a) := 
    \xs => case xs of {
       Nil => Nil,
       Cons(z,zs) => zs
        };

--def rec prd append : forall a. < List | r | Nil, Cons(a,r(a))>(a) -> <List | r | Nil, Cons(a,r(a))>(a) := 
--  \xs ys => case xs of {
--        Nil => ys,
--        Cons(z,zs) => Cons(z,append zs ys)
--};
