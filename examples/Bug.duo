module Bug;


refinement data List : (+a : CBV) -> CBV {
    Nil,
    Cons(a, List(a))
};

codata Fun : (-a : CBV, +b : CBV) -> CBV {
    Ap(a,return b)
};

type operator -> rightassoc at 0 := Fun;

refinement data Nat {
    Z,
    S(Nat)
};

data Bool : CBV {
    True,
    False
};

def prd tail : forall a. <List(b) | r | Cons(b,r(b)) > (a) -> <List(b) | r | Cons(b,r(b))>(a) := 
    \xs => case xs of { 
        Cons(_,ys) => ys
};
--  Computes the length of a list.
--def rec prd length : forall a. <List(b) | r | Nil, Cons(b,r(b)) >(a) -> <Nat | r2 | Z, S(r2)>:=
--    \xs => case xs of {
--        Nil => Z,
--        Cons(_, xs) => S(length xs)
--    };
