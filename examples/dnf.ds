set refined;
data L { Atom, NegAtom };
data Fm { Lit(L), Not(Fm), And(Fm,Fm), Or(Fm,Fm), Imp(Fm,Fm) };
data R { SetSet, Union(R,R), Distrib(R,R) };

def rec nnf := \f => match f with {
    Lit(a)   => match a with { 
      Atom    => Lit(Atom), 
      NegAtom => Lit(NegAtom) 
    },
    And(p,q) => And(nnf p, nnf q),
    Or(p,q)  => Or(nnf p, nnf q),
    Imp(p,q) => Or(nnf (Not(p)), nnf q),
    Not(x)   => match x with {
      Lit(a)   => match a with {
        Atom    => Lit(NegAtom),
        NegAtom => Lit(Atom)
      },
      Not(p)   => nnf p,
      And(p,q) => Or(nnf (Not(p)), nnf (Not(q))),
      Or(p,q)  => And(nnf (Not(p)), nnf (Not(q))),
      Imp(p,q) => And(nnf p, nnf (Not(q)))
    }
};

def nnf2dnf := \f => match f with {
		Lit(a)   => SetSet,
		Or(p,q)  => SetSet,  ## Union(nnf2dnf.'Ap(p), nnf2dnf.'Ap(q)),
		And(p,q) => SetSet   ## Distrib(nnf2dnf.'Ap(p), nnf2dnf.'Ap(q))
};

def dnf := \f => nnf2dnf (nnf f);